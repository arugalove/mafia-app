{"version":3,"sources":["constants.ts","socketClient.ts","components/ChatWindow/MessagesPure.tsx","components/ChatWindow/Messages.tsx","components/ChatWindow/FormPure.tsx","components/ChatWindow/Form.tsx","components/ChatWindow/ChatWindow.tsx","components/App/AppPure.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["MESSAGE_CONNECTED","MESSAGE_CHAT","MESSAGE_GAME_UPDATE","socket","socketIOClient","MessagesPure","messages","id","map","msg","Date","now","Messages","useState","setMessages","useEffect","on","data","off","FormPure","onSubmit","onMessageChange","message","type","value","onChange","Form","setMessage","e","target","preventDefault","emit","ChatWindow","AppPure","gameState","currentPlayerId","App","setCurrentPlayerId","setGameState","playerId","localStorage","getItem","uuidv4","setItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAKaA,EAAoB,aACpBC,EAAe,eACfC,EAAsB,cCJtBC,E,MAASC,GDDU,uC,eEInBC,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACxB,oBAAIC,GAAG,WAAP,SACKD,EAASE,KAAI,SAACC,GAAD,OACV,+BACI,4BAAIA,IACJ,8BAAG,uCAAH,IAAiB,sCAAOC,KAAKC,cAFjC,UAAYF,EAAZ,YAAmBC,KAAKC,cCHvBC,EAAW,WAAO,IAAD,EACMC,mBAAmB,IADzB,mBACnBP,EADmB,KACTQ,EADS,KAU1B,OALAC,qBAAU,WAEN,OADAZ,EAAOa,GAAGf,GAAc,SAACgB,GAAD,OAAUH,EAAY,GAAD,mBAAMR,GAAN,CAAgBW,QACtD,WAAQd,EAAOe,IAAIjB,MAC3B,CAACK,IAEG,cAAC,EAAD,CAAcA,SAAUA,KCRtBa,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,gBAAiBC,EAA9B,EAA8BA,QAA9B,OACpB,uBAAMF,SAAUA,EAAhB,UACQ,uBAAOb,GAAG,aAAagB,KAAK,OAAOC,MAAOF,EAASG,SAAUJ,IAC7D,wBAAQE,KAAK,SAAb,sBCLCG,EAAO,WAAO,IAAD,EACUb,mBAAiB,IAD3B,mBACdS,EADc,KACLK,EADK,KAGtB,OAAO,cAAC,EAAD,CACHL,QAASA,EACTD,gBAAiB,SAACO,GAAD,OAAuCD,EAAWC,EAAEC,OAAOL,QAC5EJ,SAAU,SAACQ,GACPA,EAAEE,iBACF3B,EAAO4B,KAAK9B,EAAcqB,GAC1BK,EAAW,QCPVK,G,MAAa,kBACtB,qCACG,cAAC,EAAD,IACA,cAAC,EAAD,SCCMC,EAAU,SAAC,GAAD,EAAGC,UAAH,EAAcC,gBAAd,OAMnB,aALA,CAKC,EAAD,KCVSC,EAAM,WAAO,IAAD,EACyBvB,mBAAiB,IAD1C,mBACdsB,EADc,KACGE,EADH,OAEaxB,mBAA2B,MAFxC,mBAEdqB,EAFc,KAEHI,EAFG,KA4CrB,OApCAvB,qBAAU,WACN,IAAIwB,EAAWC,aAAaC,QAAQ,iBAE/BF,IACDA,EAAWG,cACXF,aAAaG,QAAQ,gBAAiBJ,IAG1CF,EAAmBE,KACpB,IAkBHxB,qBAAU,WAGN,OAFAZ,EAAOa,GAAGhB,GAAmB,SAACiB,GAAD,OAAUqB,EAAarB,MACpDd,EAAOa,GAAGd,GAAqB,SAACe,GAAD,OAAUqB,EAAarB,MAC/C,WACHd,EAAOe,IAAIlB,GACXG,EAAOe,IAAIhB,MAEhB,IAEI,cAAC,EAAD,CAASgC,UAAWA,EAAWC,gBAAiBA,KCtC5CS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2655b823.chunk.js","sourcesContent":["// Socket.io server. To avoid CORS errors in development, the backend is\n// proxying port 3000\nexport const SOCKET_IO_SERVER = \"http://flatiron-mafia.herokuapp.com\";\n\n// Message types\nexport const MESSAGE_CONNECTED = \"connection\";\nexport const MESSAGE_CHAT = \"chat message\";\nexport const MESSAGE_GAME_UPDATE = \"game update\";\nexport const MESSAGE_USER_JOINED = \"user joined\" // testing\n","import socketIOClient from \"socket.io-client\";\nimport { SOCKET_IO_SERVER } from \"./constants\";\n\nexport const socket = socketIOClient(SOCKET_IO_SERVER);\n","import React from \"react\";\n\nexport type ChatPureProps = {\n    messages: string[];\n}\n\nexport const MessagesPure = ({ messages }: ChatPureProps): React.ReactElement => (\n    <ol id=\"messages\">\n        {messages.map((msg) => (\n            <li key={`${msg} ${Date.now()}`}>\n                <p>{msg}</p>\n                <p><b>Steven</b> <i>{`${Date.now()}`}</i></p>\n            </li>\n        ))}\n    </ol>\n)\n","import React, { useState, useEffect } from \"react\";\n\nimport { MessagesPure } from \"./MessagesPure\";\nimport { socket } from '../../socketClient';\nimport { MESSAGE_CHAT } from \"../../constants\";\n\nexport const Messages = () => {\n    const [messages, setMessages] = useState<string[]>([]);\n\n    // When this component mounts, start listening for chat messages. When it\n    // unmounts, tell the socket.io client to stop listening for chats.\n    useEffect(() => {\n        socket.on(MESSAGE_CHAT, (data) => setMessages([ ...messages, data ]));\n        return () => { socket.off(MESSAGE_CHAT); }\n    }, [messages]);\n\n    return <MessagesPure messages={messages} />\n}\n","import { ChangeEvent, FormEvent } from \"react\";\n\nexport type FormPureProps = {\n    message: string;\n    onMessageChange: (e: ChangeEvent<HTMLInputElement>) => void;\n    onSubmit: (e: FormEvent<HTMLFormElement>) => void;\n}\n\nexport const FormPure = ({ onSubmit, onMessageChange, message }: FormPureProps) => (\n    <form onSubmit={onSubmit}>\n            <input id=\"chat-input\" type=\"text\" value={message} onChange={onMessageChange} />\n            <button type=\"submit\">Send</button>\n    </form>\n);\n","import React, { ChangeEvent, useState } from \"react\";\n\nimport { FormPure } from \"./FormPure\";\nimport { socket } from \"../../socketClient\";\nimport { MESSAGE_CHAT, MESSAGE_USER_JOINED } from \"../../constants\";\n\nexport const Form = () => {\n    const [ message, setMessage ] = useState<string>(\"\");\n\n    return <FormPure\n        message={message}\n        onMessageChange={(e: ChangeEvent<HTMLInputElement> ) => setMessage(e.target.value)}\n        onSubmit={(e) => {\n            e.preventDefault();\n            socket.emit(MESSAGE_CHAT, message);\n            setMessage(\"\");\n        }}\n    />\n}\n","import React from \"react\";\n\nimport { Messages } from \"./Messages\";\nimport { Form } from \"./Form\";\n\nimport './ChatWindow.css';\n\n\nexport const ChatWindow = () => (\n    <>\n       <Messages />\n       <Form />\n    </>\n)\n\n        // <div>\n        //     <ul id=\"messages\"></ul>\n        //     <form id=\"form\" action=\"\">\n        //         <input id=\"input\" />\n        //         <button>Send</button>\n        //     </form>\n        // </div>","import React from \"react\";\nimport { ChatWindow } from \"../ChatWindow\";\nimport { JoinPage } from \"../JoinPage\";\n\nimport { GameState } from \"./types\";\n\nexport type AppPureProps = {\n    gameState: GameState | null;\n    currentPlayerId: string;\n    // username: string;\n}\n\nexport const AppPure = ({ gameState, currentPlayerId }: AppPureProps): React.ReactElement => (\n    // <pre>\n    //     {JSON.stringify(gameState, null, 2)}\n    //     {currentPlayerId}\n    // // </pre>\n    // <JoinPage playerId={currentPlayerId} />\n    <ChatWindow />\n)\n","import React, { useState, useEffect } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { socket } from '../../socketClient';\nimport { GameState } from './types';\nimport { MESSAGE_CONNECTED, MESSAGE_GAME_UPDATE } from \"../../constants\";\nimport { AppPure } from \"./AppPure\";\n\nexport const App = () => {\n    const [currentPlayerId, setCurrentPlayerId] = useState<string>(\"\");\n    const [gameState, setGameState] = useState<GameState | null>(null);\n    // const [username, setUsername] = useState<string>(\"\");\n    // const [currentMessages, setCurrentMessages] = useState<string[]>([]);\n\n    // When this component mounts, try to retrieve a player ID from localStorage.\n    // Create one if one does not exist.\n    useEffect(() => {\n        let playerId = localStorage.getItem(\"mafiaPlayerId\");\n\n        if (!playerId) {\n            playerId = uuidv4();\n            localStorage.setItem(\"mafiaPlayerId\", playerId as string);\n        }\n\n        setCurrentPlayerId(playerId as string);\n    }, []);\n\n    // When this component mounts, try to retrieve a message log from localStorage.\n    // Create one if one does not exist.\n    // useEffect(() => {\n    //     let chatMessages = localStorage.getItem(\"mafiaMessages\");\n\n    //     if (!chatMessages) {\n    //         chatMessages = currentMessages;\n    //         localStorage.setItem(\"mafiaMessages\", chatMessages);\n    //     }\n\n    //     setCurrentPlayerId(playerId as string);\n    // }, []);\n\n    // When this component mounts, start listening for updates to the game\n    // state. The user gets sent the state once on initial connection and then\n    // again any time the state on the server is updated.\n    useEffect(() => {\n        socket.on(MESSAGE_CONNECTED, (data) => setGameState(data));\n        socket.on(MESSAGE_GAME_UPDATE, (data) => setGameState(data));\n        return () => {\n            socket.off(MESSAGE_CONNECTED);\n            socket.off(MESSAGE_GAME_UPDATE);\n        }\n    }, []);\n\n    return <AppPure gameState={gameState} currentPlayerId={currentPlayerId} />\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from \"./components/App\";\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}